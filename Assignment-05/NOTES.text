>npm init

-package.json is configuration for npm 
-The most imp package in our project is bundler
-HTML,CSS,JS whole code to be bundle which does webpack bundler and shift it to production.
- create-react-app uses webpack and babbel to build things up.
-we are going to use parcel package.
-There are two type of packages /dependency -
  1) Dev Dependency - used at the time of Development
  2) Normal Dependency - used at the time of Production

> npm install -D parcel

- We are using Dev dependency for now.

^(caret) - ^1.2.3 will update minor version ^1.2.6
           we should use caret at all 

~(tilde) -  ~1.2.3 will update major version ~2.2.3

- package.json : is configuration for npm
                 It keeps track of what version is installed on our system. keeps approx version

- package-lock.json : keeps track of all exact version of all the dependency.
                     keeps a hash that whatever is in my machine is the same thing deploy on production.

- node_modules :- fetch all the code of all the dependencies (parcel) in our system.
                - and our dependency (parcel) have many other dependency thats why node_module have parcel and many more packages. This is known as transitive dependency.
                - node_module is a collection of dependencies.

                - IF we have package.json and package-lock.json then we can recreate our node node_modules again(using npm install) . So we can keep it in gitignore.


 > npx parcel index.html

 npx - executing a package.

  > npm i react react-dom

parcel :
  Documentation : https://parceljs.org/
- Dev build
- Local Server
- HMR = Hot Module Replacement (autorefreshing page)
- File Watching Algorithm - written in C++
- caching - Faster Builds
- Image optimization
- Minification
- Bundling 
- Compress
- Consistant Hashing
- Code splitting
- Differential Bundling - support older browsers as well
- Error handling - (gives better error suggesions)
- HTTPs
- Tree shaking - remove unused code 
- Different dev and prod bundles

To make build :

> npx parcel build index.html

Error : Did you mean "App.html"? 
 Try changing the file extension of "main" in package.json.

 ErrorResolve : remove "main": "app.js" from package.json



 - npx parcel index.html will regenerate dist and parcel-catche i.e it can be regenerate so it will go in gitignore.

- If we want to make use / allow our app on older browsers then we can put  
 "browserslist":[
    "last 2 versions"
  ]
in our package.json , where browserslist is from node_modules
 - check it at https://browserslist.dev/


 //-------------Episode 3 :-----------------
 -Benifits of JSX
-Babel and parcel role in JSX
-Components
 -Composing Components


 - We can write scripts in package.json to start and build our project like ( "start" : "parcel index.html",
    "build" : "parcel build index.html") 
    - and now we are no more longer using >npx parcel index.html we will use >npm run start  to run project 

- >npm run start == >npm start are same
- >npm run start behind the seens execute the package parcel with the index.html bacause we have configured this inside our package.json

- JSX :
 JSX is Javascript syntax which is easier to create react elements.

 Babel - converts all JSX code into React.createElement

**HOMEWORK - explore diff attribute in JSX

Extensions - prettier,bracket pair colorizer, Eslint,Better Comments 

- Functional Componant :
 Is a function that return some pieace of JSX code.

-Componant Composition :
 Component inside Component
 Composing two component in one another 


 What is JSX ?
 -> It is Javascript syntax which is easier to create react elements.

 SuperPower of JSX
 -> We can use javascript in JSX using {}  (curly brackets)
 -> We can use element and function in jsx using js

 {TitleComponent()} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX
 -> This all are same i.e calling function in another component and component within component


//-----Episode-04  Talk is cheap , show me the code--------------------------------------
/*
* Header
*  -Logo
*  -Nav Items
*Body
*  -Search
*  -RestaurantContainer
*    -RestaurantCard
*Footer
*  -Copyright
*  -Links
*  -Address
*  -Contact
*/

props :
 -properties are something we can pass to the component
 -passing prop to a component is passing arguments to a function.

 Destructuring props :
  - const {resName,cuisine} = props;

  const RestroCard = (props)=>{
    const {resName,cuisine} = props;
    return(
      <div>
      <h3>{resName}</h3>
      <h3>{cuisine}</h3>
      </div>
    );
  }

  JSON viewer - Is a crome extension , Json will looks good.

- Config Driven UI :
  -Website is Driven by config (JSON Data).
  -Data is Different for different Location.
  -UI will change as backend data change.
 Ex : 
 Swiggy have Diff UI and Diff Restaurant For Diff Location.The cards are different.

Array join JS -
 join is property to join array.

optional chaining :
 ex : const {name,avgRating} = resData?.data;
 
 Warning : Each child in a list should have a unique "key" prop.
->- When we are looping any List you have to give a key. Where we have to pass unique id.
  - ex: If their is a new card added , react dont know where to put that card so it will rerender all the 15 cards, it will treat all restro card as same .
  But if we give id , react will know that exact card , will render one restro card.
  - So use unique key at all when you use List or map function.
  - Dont use index as a key , this isnt recommanded. use it as last resort. 

//---------------------------------Episode-05 - Lets get Hooked--------------------------------------------

Two Types of Export / Import :-

 - Default Export / Import

   export default component;
   import Componant from "path";

 - Named Export / Import :
  
  export const Componant;
  import {Componant} from "path";
  
  #React Hooks :
   -useState() - SuperPowerful state variable in react
   -useEffect()-

whenever state variable updates/changes react rerender the component.

  React Algorithm :
   React uses Reconciliation algorithm (React Fiber) :
   ITs new way to find 
    
   Virtual DOM : It is a representation of actual DOM .

 Diff Algorithm :
   





